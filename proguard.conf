# 基本选项
# 启用优化
-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*,!code/allocation/variable
-optimizationpasses 3
-dontpreverify
-dontwarn
-ignorewarnings

# 保留属性
-keepattributes Signature
-keepattributes Exceptions
-keepattributes *Annotation*
-keepattributes SourceFile,LineNumberTable

# 保留必要的公共API，但排除multiclient包
-keep public class !com.shimizukenta.secs.secs1ontcpip.ext.multiclient.**, com.shimizukenta.secs.** { public protected *; }
-keep public interface !com.shimizukenta.secs.secs1ontcpip.ext.multiclient.**, com.shimizukenta.secs.** { *; }

# 对multiclient包进行更强的混淆 - 只保留MultiClientSecsServer和ClientConnection的公共方法
# 其他所有类和方法都将被混淆
-keepclassmembers class com.shimizukenta.secs.secs1ontcpip.ext.multiclient.Secs1OnTcpIpMultiClientCommunicator {
    public static ** newInstance(...);
    public static ** open(...);
}

-keep public class com.shimizukenta.secs.secs1ontcpip.ext.multiclient.MultiClientSecsServer {
    public <init>(...);
    public *;
    protected void addSecsLogListener(com.shimizukenta.secs.SecsLogListener);
    protected void addReceiveMessagePassThroughListener(com.shimizukenta.secs.SecsMessagePassThroughListener);
    protected void addSecsCommunicatableStateChangeListener(com.shimizukenta.secs.SecsCommunicatableStateChangeListener);
}

-keep public class com.shimizukenta.secs.secs1ontcpip.ext.multiclient.ClientConnection {
    public ** getRemoteAddress();
    public ** getCommunicator();
    public ** isConnected();
    public ** isClosed();
}

# 保留枚举
-keepclassmembers enum * {
  public static **[] values();
  public static ** valueOf(java.lang.String);
}

# 保留Serializable
-keepclassmembers class * implements java.io.Serializable {
  static final long serialVersionUID;
  private void writeObject(java.io.ObjectOutputStream);
  private void readObject(java.io.ObjectInputStream);
  java.lang.Object writeReplace();
  java.lang.Object readResolve();
}

# 保留native方法
-keepclasseswithmembernames class * {
  native <methods>;
}

# 输出混淆报告
-printmapping mapping.txt
-printseeds seeds.txt
-printusage usage.txt
-printconfiguration configuration.txt

# 混淆设置 - 更激进的混淆选项
-overloadaggressively
-repackageclasses ''
-flattenpackagehierarchy ''
-allowaccessmodification
-mergeinterfacesaggressively

# 对multiclient包进行更强的混淆
-adaptclassstrings com.shimizukenta.secs.secs1ontcpip.ext.multiclient.**
-adaptresourcefilecontents **.properties

# 对Secs1OnTcpIpMultiClientCommunicator进行完全混淆，只保留工厂方法
-keepclassmembers class com.shimizukenta.secs.secs1ontcpip.ext.multiclient.Secs1OnTcpIpMultiClientCommunicator {
    static ** newInstance(...);
    static ** open(...);
}

# 特别处理multiclient包
-assumenosideeffects class com.shimizukenta.secs.secs1ontcpip.ext.multiclient.** {
    private void debug(...);
    private void log(...);
    private static void debug(...);
    private static void log(...);
}

# 对方法内部实现进行混淆
-keepclassmembernames class * {
    private <fields>;
    private <methods>;
    protected <fields>;
    protected <methods>;
}

# 对内部类进行更强的混淆
-keepattributes Exceptions,InnerClasses,Signature,Deprecated,*Annotation*,EnclosingMethod
-renamesourcefileattribute SourceFile

# 混淆局部变量名
-keepparameternames
-adaptclassstrings
-adaptresourcefilecontents

# 混淆字符串常量 - 使用更兼容的方式
# 对类名进行混淆
-adaptclassstrings
# 对资源文件内容进行混淆
-adaptresourcefilecontents
# 使用更激进的混淆选项
-obfuscationdictionary dictionary.txt
-classobfuscationdictionary dictionary.txt
-packageobfuscationdictionary dictionary.txt

# 移除行号信息，进一步混淆
-keepattributes !LineNumberTable,!LocalVariableTable,!LocalVariableTypeTable

# 启用代码优化
-optimizations !code/simplification/cast,!field/*,!class/merging/*,!code/allocation/variable
-optimizationpasses 5
-allowaccessmodification
-useuniqueclassmembernames

# 内联方法
# 以下选项在当前版本不支持，暂时注释
# -inline-small-methods
# -inline-methods-with-loops
# -inline-unique-methods
